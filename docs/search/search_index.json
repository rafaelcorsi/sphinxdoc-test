{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Tutorial-FPGA-RTL/","text":"Criando um projeto \u00b6 Nessa primeira etapa do projeto iremos criar um hardware dedicado na FPGA para controlar os LEDs com base nos sinais de entradas dos bot\u00f5es. Iremos passar por todo o processo de desenvolvimento de um projeto em FPGA, desde sua cria\u00e7\u00e3o at\u00e9 a valida\u00e7\u00e3o no HW. Para seguir esse tutorial, \u00e9 necess\u00e1rio: Hardware: DE10-Standard e acess\u00f3rios Softwares: Quartus 18.01 Documentos: DE10-Standard_User_manual.pdf Entrega no git: Pasta: Tutorial-FPGA-RTL Quartus \u00b6 Primeiro, devemos criar um novo projeto no software Quartus. No Quartus: File \u21e8 New Project Wizard Directory, Name, Top-Level Entity Escolha o destino como sendo seu reposit\u00f3rio. nomeio o projeto como RTL_Blink_LED Project Type Empty Project Add Files N\u00e3o vamos adicionar nenhum arquivo por enquanto. Family, Device & Board Settings Procure pela FPGA : Family: Cyclone V Name: 5CSXFC6D6F31C6 \ud83c\udd97 Finalize o Wizard Outra refer\u00eancia Se precisar de outro material como refer\u00eancia, tem um tutorial da Terasic: DE10-Standard_My_First_Fpga.pdf Criando o topLevel \u00b6 TopLevel \u00e9 o nome do m\u00f3dulo mais superior em desenvolvimento hier\u00e1rquico onde, geralmente os sinais da entidade (in/out,...) ser\u00e3o mapeados a pinos do hardware (conex\u00e3o com o mundo externo). Vamos adicionar um arquivo ao projeto rec\u00e9m criado: File \u21e8 New \u21e8 VHDL File File \u21e8 save as \u21e8 name: RTL_Blink_LED.vhd \ud83c\udd97 Inicialize o arquivo com o conte\u00fado a seguir: Toplevel \u00df Info Esse c\u00f3digo poderia ser mais elegante, mas vamos deixar assim por ora. Configurando o topLevel \u00b6 No Quartus devemos dizer qual entidade \u00e9 a topLevel, como o VHDL n\u00e3o define uma padr\u00e3o para isso, qualquer entidade pode ser configurada como top. No quartus: Project \u21e8 Set as Top-Level Entity Esse comando ir\u00e1 configurar o arquivo atual como sendo o topLevel do projeto. Note que o Quartus atribui ao topLevel a entidade como sendo o nome do arquivo, se por algum motivo (que acontece) o nome do arquivo n\u00e3o for igual ao da entidade isso n\u00e3o ir\u00e1 funcionar. Verificando \u00b6 Vamos verificar se est\u00e1 tudo certo por enquanto realizando uma compila\u00e7\u00e3o completa no projeto. Para isso: Processing \u21e8 Start Compilation . Aguarde !! as compila\u00e7\u00f5es de HDL podem demorar bastante tempo. I/Os \u00b6 Lembre que o topLevel \u00e9 a entidade que ser\u00e1 mapeada com o mundo externo, nesse caso os sinais: fpga_clk_50 ; fpga_led_pio ; devem ser conectados aos pinos da FPGA que est\u00e3o conectados nesses dispositivos (clock de 50 MHz; Seis LEDs). Note o erro que o Quartus gerou quando mandamos ele compilar o projeto ( \"Show Critical Warnings Messages\" ): Failure Critical Warning (169085): No exact pin location assignment(s) for 6 pins of 6 total pins. For the list of pins please refer to the I/O Assignment Warnings table in the fitter report. Esse erro indica que do topLevel 6 sinais n\u00e3o foram mapeados para os pinos correspondentes. Pin Assigment \u00b6 Devemos indicar para a ferramenta quais s\u00e3o os pinos e qual padr\u00e3o de sinal ele deve utilizar para cada um dos sinais definidos na entidade do topLevel. LEDs \u00b6 No manual da placa (p\u00e1gina 22( temos as defini\u00e7\u00f5es de como os pinos da FPGA foram utilizados na placa: Essa tabela define o sinal (que voc\u00ea pode dar qualquer nome), o pino na FPGA na qual est\u00e1 conectado, uma breve descri\u00e7\u00e3o e o n\u00edvel el\u00e9trico de sinal na qual o pino deve ser configurado. Note que a placa DE10-Standard possui 10 LEDs conectados a FPGA. Clocks \u00b6 Tamb\u00e9m temos a defini\u00e7\u00e3o do clock (sec. 3.5, manual da placa): Note que existem 5 diferentes clocks que podem ser utilizado, os FPGA_CLKx_50 s\u00e3o clocks de 50Mhz conectados a FPGA e os HPS_CLKx_25 s\u00e3o sinais de clocks conectados exclusivamente ao ARM (HPS). Como estamos desenvolvendo na FPGA e n\u00e3o temos ainda nenhum requisito de performance, podemos escolher qualquer pino de clock FPGA_CLKx_50 . :point_right: Vamos usar (escolhido aleat\u00f3rio) o pino CLOCK3_50 . :thinking: Tenha em mente que a FPGA trabalha com diferentes dom\u00ednios de clock, quando o projeto possui temporaliza\u00e7\u00e3o cr\u00edtica, essa escolha n\u00e3o pode ser casual. Inserindo no Quartus \u00b6 Agora que temos os pinos referentes aos sinais da FPGA, devemos inserir essa informa\u00e7\u00e3o no Quartus. Existem duas maneiras de fazermos isso: Pin Planner Ferramenta gr\u00e1fica e interativa Assigments \u21e8 Pin Planer Assigments Editor Maneira mais completa e com maior flexibilidade Assigments \u21e8 Assigments Editor Iremos utilizar a princ\u00edpio o Pin Planner para inserir esses pinos, para isso: Assignments \u21e8 Pin Planner . A interface do Pin Planner exibe os pinos/ bancos dispon\u00edveis da FPGA para serem alocados aos sinais do topLevel. Note que a coluna Fitter Location j\u00e1 possui pinos alocados aos sinais, isso foi gerado automaticamente pelo Quartus na etapa de Filter , por\u00e9m eles n\u00e3o correspondem aos pinos reais que desejamos utilizar. :bangbang: Edite a coluna Location utilizando como refer\u00eancia a tabela anterior. Note que o I/O Standard n\u00e3o reflete o definido no manual que \u00e9 \u00e9 o 3.3V CMOS . Voc\u00ea deve alterar essa coluna de 2.5V CMOS (Default) para 3.3-V LVTTL . :point_right: Normalmente atribu\u00edmos a FPGA uma flexibilidade l\u00f3gica, mas note a flexibilidade que ela possui quanto a defini\u00e7\u00e3o de n\u00edvel de sinal de cada pino. Isso permite ao desenvolvedor de hardware in\u00fameras op\u00e7\u00f5es de uso e de novas configura\u00e7\u00f5es. :point_right: Feche a ferramenta e abra o Assignment Editor : Assignments \u21e8 Assignments Editor . Note que as mesmas informa\u00e7\u00f5es inseridas anteriormente est\u00e3o nesse editor. Na verdade, todas as configura\u00e7\u00f5es da FPGA s\u00e3o exibidas no Assignments Editor e apenas algumas no Pin Planner . :repeat: Recompile o projeto e note que n\u00e3o temos mais o erro referente a aloca\u00e7\u00e3o dos pinos. Timing Requirements not met \u00b6 Note que ap\u00f3s compilar o projeto ainda possu\u00edmos um erro critico : Critical Warning (332012): Synopsys Design Constraints File file not found. A Synopsys Design Constraints File is required by the TimeQuest Timing Analyzer to get proper timing constraints. Without it, the Compiler will not properly optimize the design. Critical Warning (332148): Timing requirements not met Info (11105): For recommendations on closing timing, run Report Timing Closure Recommendations in the TimeQuest Timing Analyzer. Esse erro \u00e9 referente a n\u00e3o termos indicado para o Quartus qual a frequ\u00eancia de opera\u00e7\u00e3o do nosso sistema. Como a frequ\u00eancia n\u00e3o est\u00e1 definida a etapa de Fitter and Assembler n\u00e3o consegue otimizar o projeto corretamente, resultando nesse erro. :point_right: Assembler aqui \u00e9 diferente do assembler de um programa como C . De uma olhada nessa refer\u00eancia para maiores detalhes. Synopsys Design Constraints File \u00b6 Devemos adicionar um novo arquivo ao projeto que ir\u00e1 indicar para a ferramenta quais s\u00e3o as condi\u00e7\u00f5es de contorno do projeto. Para isso: File \u21e8 New File \u21e8 Synopsys Design Constraints File \u21e8 Save As : RTL_Blink_LED.sdc Adicione ao arquivo o seguinte conte\u00fado: # 50MHz board input clock create_clock -period 20 [get_ports fpga_clk_50] # Automatically apply a generate clock on the output of phase-locked loops (PLLs) derive_pll_clocks Essas linhas indicam para a ferramenta que o sinal fpga_clk_50 \u00e9 um sinal de clock com frequ\u00eancia 50MHz (20 ns de per\u00edodo) e \u00e9 para a inferir outros clocks autom\u00e1ticos (caso um PLL seja utilizado). 1^: https://www.altera.com/support/support-resources/design-examples/design-software/timinganalyzer/exm-tq-basic-sdc-template.html :repeat: Recompile o projeto e note que esse alerta some. RTL Viewer \u00b6 RTL Viewer \u00e9 uma maneira gr\u00e1fica de verificar se o c\u00f3digo em HDL foi interpretado corretamente pela ferramenta, e uma \u00f3tima maneira de verificar se a descri\u00e7\u00e3o do hardware est\u00e1 correta. Para isso v\u00e1 em : Tools -> NetList Viewers -> RTL Viewer . Gravando \u00b6 Conecte a FPGA no Host via o conector USB Blaster Com o projeto compilando o Quartus gera um arquivo bin\u00e1rio na pasta output_files com extens\u00e3o *.sof . Esse arquivo \u00e9 o que ser\u00e1 carregado na FPGA para executar o projeto. Para isso abra : Tools -> Programmmer . Nessa etapa voc\u00ea deve clicar em Auto Detect, essa etapa ir\u00e1 ler via JTAG todos os dispositivos que est\u00e3o conectados no JTAG chain , voc\u00ea ir\u00e1 notar que ir\u00e3o aparecer dois dispositivos: SOCVHPS : ARM Cortex A7 5CSXFC6D : FPGA Talvez seja necess\u00e1rio configurar o Linux para reconhecer o JTAG, siga os passos em: Configurando USB Blaster Linux . Exerc\u00edcios \u00b6 :beginner: : F\u00e1cil :beginner: Fa\u00e7a os LEDs piscarem mais devagar :beginner: Adicione bot\u00f5es ao projeto e fa\u00e7a eles controlarem os LEDs Fa\u00e7a as chaves controlarem a frequ\u00eancia na qual os LEDs piscam Adicione um PWM aos LEDs para controlar sua intensidade Entrega 1 \u00b6 :bangbang: Siga para a Entrega 1","title":"Tutorial FPGA RTL"},{"location":"Tutorial-FPGA-RTL/#criando-um-projeto","text":"Nessa primeira etapa do projeto iremos criar um hardware dedicado na FPGA para controlar os LEDs com base nos sinais de entradas dos bot\u00f5es. Iremos passar por todo o processo de desenvolvimento de um projeto em FPGA, desde sua cria\u00e7\u00e3o at\u00e9 a valida\u00e7\u00e3o no HW. Para seguir esse tutorial, \u00e9 necess\u00e1rio: Hardware: DE10-Standard e acess\u00f3rios Softwares: Quartus 18.01 Documentos: DE10-Standard_User_manual.pdf Entrega no git: Pasta: Tutorial-FPGA-RTL","title":"Criando um projeto"},{"location":"Tutorial-FPGA-RTL/#quartus","text":"Primeiro, devemos criar um novo projeto no software Quartus. No Quartus: File \u21e8 New Project Wizard Directory, Name, Top-Level Entity Escolha o destino como sendo seu reposit\u00f3rio. nomeio o projeto como RTL_Blink_LED Project Type Empty Project Add Files N\u00e3o vamos adicionar nenhum arquivo por enquanto. Family, Device & Board Settings Procure pela FPGA : Family: Cyclone V Name: 5CSXFC6D6F31C6 \ud83c\udd97 Finalize o Wizard Outra refer\u00eancia Se precisar de outro material como refer\u00eancia, tem um tutorial da Terasic: DE10-Standard_My_First_Fpga.pdf","title":"Quartus"},{"location":"Tutorial-FPGA-RTL/#criando-o-toplevel","text":"TopLevel \u00e9 o nome do m\u00f3dulo mais superior em desenvolvimento hier\u00e1rquico onde, geralmente os sinais da entidade (in/out,...) ser\u00e3o mapeados a pinos do hardware (conex\u00e3o com o mundo externo). Vamos adicionar um arquivo ao projeto rec\u00e9m criado: File \u21e8 New \u21e8 VHDL File File \u21e8 save as \u21e8 name: RTL_Blink_LED.vhd \ud83c\udd97 Inicialize o arquivo com o conte\u00fado a seguir: Toplevel \u00df Info Esse c\u00f3digo poderia ser mais elegante, mas vamos deixar assim por ora.","title":"Criando o topLevel"},{"location":"Tutorial-FPGA-RTL/#configurando-o-toplevel","text":"No Quartus devemos dizer qual entidade \u00e9 a topLevel, como o VHDL n\u00e3o define uma padr\u00e3o para isso, qualquer entidade pode ser configurada como top. No quartus: Project \u21e8 Set as Top-Level Entity Esse comando ir\u00e1 configurar o arquivo atual como sendo o topLevel do projeto. Note que o Quartus atribui ao topLevel a entidade como sendo o nome do arquivo, se por algum motivo (que acontece) o nome do arquivo n\u00e3o for igual ao da entidade isso n\u00e3o ir\u00e1 funcionar.","title":"Configurando o topLevel"},{"location":"Tutorial-FPGA-RTL/#verificando","text":"Vamos verificar se est\u00e1 tudo certo por enquanto realizando uma compila\u00e7\u00e3o completa no projeto. Para isso: Processing \u21e8 Start Compilation . Aguarde !! as compila\u00e7\u00f5es de HDL podem demorar bastante tempo.","title":"Verificando"},{"location":"Tutorial-FPGA-RTL/#ios","text":"Lembre que o topLevel \u00e9 a entidade que ser\u00e1 mapeada com o mundo externo, nesse caso os sinais: fpga_clk_50 ; fpga_led_pio ; devem ser conectados aos pinos da FPGA que est\u00e3o conectados nesses dispositivos (clock de 50 MHz; Seis LEDs). Note o erro que o Quartus gerou quando mandamos ele compilar o projeto ( \"Show Critical Warnings Messages\" ): Failure Critical Warning (169085): No exact pin location assignment(s) for 6 pins of 6 total pins. For the list of pins please refer to the I/O Assignment Warnings table in the fitter report. Esse erro indica que do topLevel 6 sinais n\u00e3o foram mapeados para os pinos correspondentes.","title":"I/Os"},{"location":"Tutorial-FPGA-RTL/#pin-assigment","text":"Devemos indicar para a ferramenta quais s\u00e3o os pinos e qual padr\u00e3o de sinal ele deve utilizar para cada um dos sinais definidos na entidade do topLevel.","title":"Pin Assigment"},{"location":"Tutorial-FPGA-RTL/#leds","text":"No manual da placa (p\u00e1gina 22( temos as defini\u00e7\u00f5es de como os pinos da FPGA foram utilizados na placa: Essa tabela define o sinal (que voc\u00ea pode dar qualquer nome), o pino na FPGA na qual est\u00e1 conectado, uma breve descri\u00e7\u00e3o e o n\u00edvel el\u00e9trico de sinal na qual o pino deve ser configurado. Note que a placa DE10-Standard possui 10 LEDs conectados a FPGA.","title":"LEDs"},{"location":"Tutorial-FPGA-RTL/#clocks","text":"Tamb\u00e9m temos a defini\u00e7\u00e3o do clock (sec. 3.5, manual da placa): Note que existem 5 diferentes clocks que podem ser utilizado, os FPGA_CLKx_50 s\u00e3o clocks de 50Mhz conectados a FPGA e os HPS_CLKx_25 s\u00e3o sinais de clocks conectados exclusivamente ao ARM (HPS). Como estamos desenvolvendo na FPGA e n\u00e3o temos ainda nenhum requisito de performance, podemos escolher qualquer pino de clock FPGA_CLKx_50 . :point_right: Vamos usar (escolhido aleat\u00f3rio) o pino CLOCK3_50 . :thinking: Tenha em mente que a FPGA trabalha com diferentes dom\u00ednios de clock, quando o projeto possui temporaliza\u00e7\u00e3o cr\u00edtica, essa escolha n\u00e3o pode ser casual.","title":"Clocks"},{"location":"Tutorial-FPGA-RTL/#inserindo-no-quartus","text":"Agora que temos os pinos referentes aos sinais da FPGA, devemos inserir essa informa\u00e7\u00e3o no Quartus. Existem duas maneiras de fazermos isso: Pin Planner Ferramenta gr\u00e1fica e interativa Assigments \u21e8 Pin Planer Assigments Editor Maneira mais completa e com maior flexibilidade Assigments \u21e8 Assigments Editor Iremos utilizar a princ\u00edpio o Pin Planner para inserir esses pinos, para isso: Assignments \u21e8 Pin Planner . A interface do Pin Planner exibe os pinos/ bancos dispon\u00edveis da FPGA para serem alocados aos sinais do topLevel. Note que a coluna Fitter Location j\u00e1 possui pinos alocados aos sinais, isso foi gerado automaticamente pelo Quartus na etapa de Filter , por\u00e9m eles n\u00e3o correspondem aos pinos reais que desejamos utilizar. :bangbang: Edite a coluna Location utilizando como refer\u00eancia a tabela anterior. Note que o I/O Standard n\u00e3o reflete o definido no manual que \u00e9 \u00e9 o 3.3V CMOS . Voc\u00ea deve alterar essa coluna de 2.5V CMOS (Default) para 3.3-V LVTTL . :point_right: Normalmente atribu\u00edmos a FPGA uma flexibilidade l\u00f3gica, mas note a flexibilidade que ela possui quanto a defini\u00e7\u00e3o de n\u00edvel de sinal de cada pino. Isso permite ao desenvolvedor de hardware in\u00fameras op\u00e7\u00f5es de uso e de novas configura\u00e7\u00f5es. :point_right: Feche a ferramenta e abra o Assignment Editor : Assignments \u21e8 Assignments Editor . Note que as mesmas informa\u00e7\u00f5es inseridas anteriormente est\u00e3o nesse editor. Na verdade, todas as configura\u00e7\u00f5es da FPGA s\u00e3o exibidas no Assignments Editor e apenas algumas no Pin Planner . :repeat: Recompile o projeto e note que n\u00e3o temos mais o erro referente a aloca\u00e7\u00e3o dos pinos.","title":"Inserindo no Quartus"},{"location":"Tutorial-FPGA-RTL/#timing-requirements-not-met","text":"Note que ap\u00f3s compilar o projeto ainda possu\u00edmos um erro critico : Critical Warning (332012): Synopsys Design Constraints File file not found. A Synopsys Design Constraints File is required by the TimeQuest Timing Analyzer to get proper timing constraints. Without it, the Compiler will not properly optimize the design. Critical Warning (332148): Timing requirements not met Info (11105): For recommendations on closing timing, run Report Timing Closure Recommendations in the TimeQuest Timing Analyzer. Esse erro \u00e9 referente a n\u00e3o termos indicado para o Quartus qual a frequ\u00eancia de opera\u00e7\u00e3o do nosso sistema. Como a frequ\u00eancia n\u00e3o est\u00e1 definida a etapa de Fitter and Assembler n\u00e3o consegue otimizar o projeto corretamente, resultando nesse erro. :point_right: Assembler aqui \u00e9 diferente do assembler de um programa como C . De uma olhada nessa refer\u00eancia para maiores detalhes.","title":"Timing Requirements not met"},{"location":"Tutorial-FPGA-RTL/#synopsys-design-constraints-file","text":"Devemos adicionar um novo arquivo ao projeto que ir\u00e1 indicar para a ferramenta quais s\u00e3o as condi\u00e7\u00f5es de contorno do projeto. Para isso: File \u21e8 New File \u21e8 Synopsys Design Constraints File \u21e8 Save As : RTL_Blink_LED.sdc Adicione ao arquivo o seguinte conte\u00fado: # 50MHz board input clock create_clock -period 20 [get_ports fpga_clk_50] # Automatically apply a generate clock on the output of phase-locked loops (PLLs) derive_pll_clocks Essas linhas indicam para a ferramenta que o sinal fpga_clk_50 \u00e9 um sinal de clock com frequ\u00eancia 50MHz (20 ns de per\u00edodo) e \u00e9 para a inferir outros clocks autom\u00e1ticos (caso um PLL seja utilizado). 1^: https://www.altera.com/support/support-resources/design-examples/design-software/timinganalyzer/exm-tq-basic-sdc-template.html :repeat: Recompile o projeto e note que esse alerta some.","title":"Synopsys Design Constraints File"},{"location":"Tutorial-FPGA-RTL/#rtl-viewer","text":"RTL Viewer \u00e9 uma maneira gr\u00e1fica de verificar se o c\u00f3digo em HDL foi interpretado corretamente pela ferramenta, e uma \u00f3tima maneira de verificar se a descri\u00e7\u00e3o do hardware est\u00e1 correta. Para isso v\u00e1 em : Tools -> NetList Viewers -> RTL Viewer .","title":"RTL Viewer"},{"location":"Tutorial-FPGA-RTL/#gravando","text":"Conecte a FPGA no Host via o conector USB Blaster Com o projeto compilando o Quartus gera um arquivo bin\u00e1rio na pasta output_files com extens\u00e3o *.sof . Esse arquivo \u00e9 o que ser\u00e1 carregado na FPGA para executar o projeto. Para isso abra : Tools -> Programmmer . Nessa etapa voc\u00ea deve clicar em Auto Detect, essa etapa ir\u00e1 ler via JTAG todos os dispositivos que est\u00e3o conectados no JTAG chain , voc\u00ea ir\u00e1 notar que ir\u00e3o aparecer dois dispositivos: SOCVHPS : ARM Cortex A7 5CSXFC6D : FPGA Talvez seja necess\u00e1rio configurar o Linux para reconhecer o JTAG, siga os passos em: Configurando USB Blaster Linux .","title":"Gravando"},{"location":"Tutorial-FPGA-RTL/#exercicios","text":":beginner: : F\u00e1cil :beginner: Fa\u00e7a os LEDs piscarem mais devagar :beginner: Adicione bot\u00f5es ao projeto e fa\u00e7a eles controlarem os LEDs Fa\u00e7a as chaves controlarem a frequ\u00eancia na qual os LEDs piscam Adicione um PWM aos LEDs para controlar sua intensidade","title":"Exerc\u00edcios"},{"location":"Tutorial-FPGA-RTL/#entrega-1","text":":bangbang: Siga para a Entrega 1","title":"Entrega 1"}]}