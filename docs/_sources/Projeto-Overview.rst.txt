Overview do Projeto Final
=========================

O projeto final da disciplina deve ser um tutorial com alguma rela√ß√£o
aos objetivos de aprendizagem da mat√©ria:

-  Formular solu√ß√µes que satisfazem requisitos de hardware e software de
   projetos com FPGA-SoC (System-on-a-chip)
-  Integrar em um prot√≥tipo solu√ß√£o para um sistema embarcado com
   requisitos de processamento e/ou tempo real via FPGA-SoC
-  Interfacear diferentes m√≥dulos em um sistema embarcado
   (processadores, firmware e sistema operacional)

Alguns exemplos de √°reas que podem ser atacadas:

1. Acelera√ß√£o/ implementa√ß√£o de algum algor√≠timo em hardware

   -  processamento de dados, FFT, compress√£o, criptografia, ‚Ä¶
   -  HLD/ HLS/ OpenCL/ FPGA Amazon

2. Compara√ß√£o de performance entre diferentes tecnologias

   -  SoC vs GPU vs FPGA vs uC

3. Sistema operacional

   -  Escalonador real time kernel linux, Android, RTOS embarcado

Tecnologias/ Ferramentas
========================

A seguir uma lista de tecnologias que podem ser estudadas no tutorial: Voc√™ pode optar
por explorar um tema que √© 100% hardware, 100% software ou uma combina√ß√£o entre eles.

HDL (VHDL/Verilog)
----------------------

Desenolver/estudar um sistema que possa ser descrito em uma combina

Exemplo:

-  `Adicionar uma instru√ß√£o customizada ao NIOS <https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/ug/ug_nios2_custom_instruction.pdf>`__
- Platform designer
- Criar um sistema para controlar um dos rob√¥s de rob√≥tica
- Criar um perif√©rico para interfacear com o mundo externo (ler teclado/ motor/ fita de Led/ ‚Ä¶)

High Level Synthesis (HLS)
-----------------------------

- `HLS Compiler <https://www.intel.com/content/www/us/en/software/programmable/quartus-prime/hls-compiler.html>`

Usar a ferramenta do desenvolvedor que converte um c√≥digo em c++ para um perif√©rico, voc√™ deve usar esse perif√©rico
(exe: platform designer) para criar um HW + SW capaz de utilizar essa fun√ß√£o. 

Exemplo:

-  `Aplicar uma transformada em uma imagem <https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/wp/wp-01274-intel-hls-compiler-fast-design-coding-and-hardware.pdf>`__

OpenCL
------------------

- `OpenCL Intel FPGA  <https://www.intel.com/content/www/us/en/software/programmable/sdk-for-opencl/overview.html>`__
- `Terasic Manual <https://github.com/Insper/DE10-Standard-v.1.3.0-SystemCD/blob/master/Manual/DE10_Standard_OpenCL.pdf>`__

OpenCL √© diferente do HLS, no OpenCL n√£o temos o dom√≠nio do HW que √© gerado, o OpenCL utiliza um run time para executar,
e o HW √© compilado e programado de forma transparente. Alguns pontos: 

1. OpenCL foi feito para programa√ß√£o paralela, o que √© acelerado √© o kernel da fun√ß√£o; 
2. A compila√ß√£o √© bem demorada (cada compila√ß√£o gera um HW)
3. √â necess√°rio aprender um pouco de OpenCL

Exemplo:

- `Exemplos Intel <https://www.intel.com/content/www/us/en/programmable/products/design-software/embedded-software-developers/opencl/support.html>`__)

Linux
--------

Explorar a customiza√ß√£o de aplica√ß√µes com linux e modifica√ß√µes no kernel.

Exemoplos:

- `real time <https://www.linuxfoundation.org/blog/2013/03/intro-to-real-time-linux-for-embedded-developers/>`__
- Otimiza√ß√µes energ√©tica 
- üëç `boot time <https://embexus.com/2017/05/16/embedded-linux-fast-boot-techniques/>`__
-  Aplica√ß√µes (criar um software para um sistema embarcado) 
- üëç Executar `Android <https://www.youtube.com/watch?v=zHqS_yWiMNI>`

Hardwares
=========

Temos os seguintes kits de desenvolvimento dispon√≠vel:

A seguir, eu tentei resumir os hardwares dispon√≠veis no Insper e as
respectivas tecnologias que podem ser utilizados com ele

===================================================================================================================== ======= ========== ==== === ====== ===== ====== ====
Kit                                                                                                                   Empresa Tecnologia vhdl HLS OpenCL Linux OpenCV Cuda
===================================================================================================================== ======= ========== ==== === ====== ===== ====== ====
`Arria 10 SoC <https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&CategoryNo=216&No=997>`__          Intel   FPGA + ARM x    x   x      x     x     
`DE10-Standard <https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&No=1081>`__                       Intel   FPGA + ARM x    x   x      x     x     
`DE10-nano-soc <https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&No=941>`__                        Intel   FPGA + ARM x    x   x      x     x     
`Terasic SoC SoM <https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&CategoryNo=167&No=1211>`__      Intel   FPGA + ARM x    x   x      x     x     
`DE5a-NET-DDR4 <https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&CategoryNo=1&No=1108&PartNo=1>`__ Intel   FPGA       x    x   x            x     
`ZedBoard <http://zedboard.org/product/zedboard>`__                                                                   Xilinx  FPGA + ARM x    x   x      x     x     
`inst√¢ncia F1 <https://aws.amazon.com/ec2/instance-types/f1/>`__                                                      AWS     FPGA                x                  
`Jetson TK2 <https://developer.nvidia.com/embedded/jetson-tx2>`__                                                     NVIDIa  ARM + GPU                  x     x      x
\                                                                                                                                                                    
===================================================================================================================== ======= ========== ==== === ====== ===== ====== ====

Exemplos de temas/ coisas legais
================================

‚ÄºÔ∏è: demanda uma dedica√ß√£o maior

-  Criando um SoftProcessor e API para controlar um Drone
-  `OpenCV acelerado com OpenCL -
   ZedBoard <https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841665/HLS+Video+Library>`__
-  ‚ÄºÔ∏è Criar uma aplica√ß√£o com HLS/OpenCL que acelera uma fun√ß√£o na FPGA

   -  Processamento de imagem/ compress√£o de dados/ criptografia/ fft/ ‚Ä¶

-  ‚ÄºÔ∏è `Criar uma aplica√ß√£o com OpenCL na
   AWS <https://github.com/aws/aws-fpga>`__
-  `Embarcando ROS no
   SoC-FPGA <http://wiki.ros.org/hydro/Installation/OpenEmbedded>`__
   (primeiro passo para controlarmos os rob√¥s de rob√≥tica com a FPGA)
-  ‚ÄºÔ∏è Usar o `LCD
   LT24 <https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&CategoryNo=68&No=892>`__
   com o Linux (Comunica√ß√£o ARM-FPGA)
-  `Real Time
   kernel <https://www.linuxfoundation.org/blog/2013/03/intro-to-real-time-linux-for-embedded-developers/>`__
   √© realmente tempo real? Estudo de lat√™ncia‚Ä¶
-  Otimizando o `boot
   time <https://embexus.com/2017/05/16/embedded-linux-fast-boot-techniques/>`__
   do linux
-  Executando `Android <https://www.youtube.com/watch?v=zHqS_yWiMNI>`__
   na DE10-Standard
-  Interface gr√°ficas em sistemas embarcados (exe: criar um totem de
   pagamento)
-  Device driver: Criar um driver no linux `para algum sensor de
   dist√¢ncia <https://github.com/johannesthoma/linux-hc-sro4>`__
-  ‚ÄºÔ∏è Criar um perif√©rico para controlar a fita de LED RGB e criar um
   driver para o Linux controlar
-  BanchMark entre os diferentes kits de desenvolvimento
-  Usando o `yocto <https://www.yoctoproject.org/>`__ como alternativa
   ao buildroot para gerar o Linux

Rubrica
=======

O tutorial deve ser de autoria do aluno e auto contido, publicado na
wiki da disciplina. A rubrica √© incremental, para tirar A precisa ter
alcan√ßado o B antes‚Ä¶ Tutoriais em ingl√™s s√£o acrescidos de 1/2 conceito.

-  A

   -  √â um tutorial de um tema novo
   -  Possui um guia ao final do tutorial em como se aprofundar no tema
   -  Possui claro quais s√£o os pontos cr√≠ticos, e o que fazer em caso
      de erro

-  B

   -  O tutorial √© uma jun√ß√£o de outros tutoriais por√©m avan√ßa a onde os
      outros n√£o foram
   -  O tutorial mescla teoria e pr√°tica de maneira aprofundada, mas sem
      travar o fluxo do mesmo

-  C

   -  O tutorial √© uma jun√ß√£o de outros tutoriais ou deriva√ß√£o de um
      exemplo j√° existente
   -  Tutorial √© reproduz√≠vel (outra pessoa consegue seguir e chegar nos
      mesmos resultados)
   -  Possui um pouco de teoria, sem aprofundamento
   -  Possui refer√™ncias externas
